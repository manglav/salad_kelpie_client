# coding: utf-8

"""
    🐕 Kelpie API

    API for running long jobs on Salad  # noqa: E501

    OpenAPI spec version: 0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cancel_job(self, id, **kwargs):  # noqa: E501
        """Cancel job  # noqa: E501

        Cancel a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cancel_job(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cancel_job_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cancel_job_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_cancel_job_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cancel job  # noqa: E501

        Cancel a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cancel_job_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cancel_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cancel_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_clear_jobs(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all jobs  # noqa: E501

        Clear all jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_clear_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_clear_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_clear_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all jobs  # noqa: E501

        Clear all jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_clear_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_clear_scaling_rules(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all scaling rules  # noqa: E501

        Clear all scaling rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_scaling_rules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_clear_scaling_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_clear_scaling_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_clear_scaling_rules_with_http_info(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all scaling rules  # noqa: E501

        Clear all scaling rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_scaling_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_clear_scaling_rules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_clear_users(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all users  # noqa: E501

        Clear all users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_clear_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_clear_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_clear_users_with_http_info(self, **kwargs):  # noqa: E501
        """(ADMIN) Clear all users  # noqa: E501

        Clear all users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_clear_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_clear_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_delete_scaling_rule(self, id, **kwargs):  # noqa: E501
        """Delete a scaling rule  # noqa: E501

        Delete a scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_delete_scaling_rule(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_delete_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_delete_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_delete_scaling_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a scaling rule  # noqa: E501

        Delete a scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_delete_scaling_rule_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_delete_scaling_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_delete_scaling_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_job(self, id, **kwargs):  # noqa: E501
        """Get a job  # noqa: E501

        Get a job by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_job(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_job_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_job_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_get_job_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a job  # noqa: E501

        Get a job by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_job_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_get_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_scaling_rule(self, id, **kwargs):  # noqa: E501
        """Get a scaling rule  # noqa: E501

        Get a scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_scaling_rule(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_get_scaling_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a scaling rule  # noqa: E501

        Get a scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_scaling_rule_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_scaling_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_get_scaling_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_work(self, machine_id, container_group_id, **kwargs):  # noqa: E501
        """Get work  # noqa: E501

        Get a job to work on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_work(machine_id, container_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object machine_id: Machine ID (required)
        :param object container_group_id: Container Group ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_work_with_http_info(machine_id, container_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_work_with_http_info(machine_id, container_group_id, **kwargs)  # noqa: E501
            return data

    def get_get_work_with_http_info(self, machine_id, container_group_id, **kwargs):  # noqa: E501
        """Get work  # noqa: E501

        Get a job to work on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_work_with_http_info(machine_id, container_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object machine_id: Machine ID (required)
        :param object container_group_id: Container Group ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['machine_id', 'container_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_work" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'machine_id' is set
        if ('machine_id' not in params or
                params['machine_id'] is None):
            raise ValueError("Missing the required parameter `machine_id` when calling `get_get_work`")  # noqa: E501
        # verify the required parameter 'container_group_id' is set
        if ('container_group_id' not in params or
                params['container_group_id'] is None):
            raise ValueError("Missing the required parameter `container_group_id` when calling `get_get_work`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'machine_id' in params:
            query_params.append(('machine_id', params['machine_id']))  # noqa: E501
        if 'container_group_id' in params:
            query_params.append(('container_group_id', params['container_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/work', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_jobs(self, **kwargs):  # noqa: E501
        """List jobs  # noqa: E501

        List your jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object status: Job status
        :param object container_group_id: Container Group ID
        :param object page_size: Page size
        :param object page: Page number
        :param object asc: Sort ascending
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """List jobs  # noqa: E501

        List your jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object status: Job status
        :param object container_group_id: Container Group ID
        :param object page_size: Page size
        :param object page: Page number
        :param object asc: Sort ascending
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'container_group_id', 'page_size', 'page', 'asc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'container_group_id' in params:
            query_params.append(('container_group_id', params['container_group_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_scaling_rules(self, **kwargs):  # noqa: E501
        """List all scaling rules  # noqa: E501

        List all scaling rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_scaling_rules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_scaling_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_scaling_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_scaling_rules_with_http_info(self, **kwargs):  # noqa: E501
        """List all scaling rules  # noqa: E501

        List all scaling rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_scaling_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_scaling_rules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_update_scaling_rule(self, id, **kwargs):  # noqa: E501
        """Update an existing scaling rule  # noqa: E501

        Update an existing scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_update_scaling_rule(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :param ScalingrulesIdBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_update_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_update_scaling_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def patch_update_scaling_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an existing scaling rule  # noqa: E501

        Update an existing scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_update_scaling_rule_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Container Group ID (required)
        :param ScalingrulesIdBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_update_scaling_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_update_scaling_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_batch_create_jobs(self, **kwargs):  # noqa: E501
        """Queue multiple jobs  # noqa: E501

        Queue multiple jobs in one request. Limit 1000 jobs per request.   Queue a new job to be executed by the specified container group. [Get your Container Group ID](https://docs.salad.com/reference/get_container_group)  Note that although we use the term \"AWS S3 bucket\" in the documentation, you can use any S3-compatible storage provider. In particular, we recommend choosing a provider with no egress fees, such as [Cloudflare R2.](https://www.cloudflare.com/developer-platform/r2/)  You must use either the `sync` object or the `input_bucket`, `input_prefix`, `checkpoint_bucket`, `checkpoint_prefix`, `output_bucket`, and `output_prefix` fields. You may not use both.  **Body**  | Key                 | Type     | Description        | Default | |---------------------|----------|--------------------|---------| | `command`           | string   | The command to execute. | **required** | | `arguments`         | array    | List of arguments for the command. | [] | | `environment`       | object   | Key-value pairs defining the environment variables. | {} | | `input_bucket`      | string   | Name of the AWS S3 bucket for input files. | *optional* | | `input_prefix`      | string   | Prefix for input files in the S3 bucket. | *optional* | | `checkpoint_bucket` | string   | Name of the AWS S3 bucket for checkpoint files. | *optional* | | `checkpoint_prefix` | string   | Prefix for checkpoint files in the S3 bucket. | *optional* | | `output_bucket`     | string   | Name of the AWS S3 bucket for output files. | *optional* | | `output_prefix`     | string   | Prefix for output files in the S3 bucket. | *optional* | | `max_failures`      | integer  | Maximum number of allowed failures before the job is marked failed. | 3 | | `heartbeat_interval`| integer | Time interval (in seconds) for sending heartbeat signals. | 30 | | `webhook`           | string   | URL for the webhook to notify upon completion or failure. | *optional* | | `container_group_id`| string  | ID of the container group where the command will be executed. | **required** | | `compression` | boolean | If true, will gzip files it uploads to the bucket, appending the filename with .gz | false | | `sync` | object | Sync configuration for the job. | *optional* |  **body.sync**  | Key      | Type   | Description | Default | |----------|--------|-------------|---------| | `before` | SyncConfig[] | List of sync configurations to run before the job. | *optional* | | `during` | SyncConfig[] | List of sync configurations to run during the job. | *optional* | | `after`  | SyncConfig[] | List of sync configurations to run after the job, but before marking the job complete. | *optional* |  **SyncConfig**  | Key          | Type   | Description | Default | |--------------|--------|-------------|---------| | `bucket`     | string | Name of the AWS S3 bucket. | **required** | | `prefix`     | string | Prefix for files in the S3 bucket. | **required** | | `local_path` | string | Local path to sync files to/from. | **required** | | `direction`  | string | Direction of the sync. Must be \"download\" for `before`, and \"upload\" for `during` and `after` | **required** | | `pattern`    | string | An ECMAScript(javascript) Regular Expression. Filepaths/keys that match will be included in the sync. Default is to include all files. | *optional* |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_batch_create_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_batch_create_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_batch_create_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_batch_create_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Queue multiple jobs  # noqa: E501

        Queue multiple jobs in one request. Limit 1000 jobs per request.   Queue a new job to be executed by the specified container group. [Get your Container Group ID](https://docs.salad.com/reference/get_container_group)  Note that although we use the term \"AWS S3 bucket\" in the documentation, you can use any S3-compatible storage provider. In particular, we recommend choosing a provider with no egress fees, such as [Cloudflare R2.](https://www.cloudflare.com/developer-platform/r2/)  You must use either the `sync` object or the `input_bucket`, `input_prefix`, `checkpoint_bucket`, `checkpoint_prefix`, `output_bucket`, and `output_prefix` fields. You may not use both.  **Body**  | Key                 | Type     | Description        | Default | |---------------------|----------|--------------------|---------| | `command`           | string   | The command to execute. | **required** | | `arguments`         | array    | List of arguments for the command. | [] | | `environment`       | object   | Key-value pairs defining the environment variables. | {} | | `input_bucket`      | string   | Name of the AWS S3 bucket for input files. | *optional* | | `input_prefix`      | string   | Prefix for input files in the S3 bucket. | *optional* | | `checkpoint_bucket` | string   | Name of the AWS S3 bucket for checkpoint files. | *optional* | | `checkpoint_prefix` | string   | Prefix for checkpoint files in the S3 bucket. | *optional* | | `output_bucket`     | string   | Name of the AWS S3 bucket for output files. | *optional* | | `output_prefix`     | string   | Prefix for output files in the S3 bucket. | *optional* | | `max_failures`      | integer  | Maximum number of allowed failures before the job is marked failed. | 3 | | `heartbeat_interval`| integer | Time interval (in seconds) for sending heartbeat signals. | 30 | | `webhook`           | string   | URL for the webhook to notify upon completion or failure. | *optional* | | `container_group_id`| string  | ID of the container group where the command will be executed. | **required** | | `compression` | boolean | If true, will gzip files it uploads to the bucket, appending the filename with .gz | false | | `sync` | object | Sync configuration for the job. | *optional* |  **body.sync**  | Key      | Type   | Description | Default | |----------|--------|-------------|---------| | `before` | SyncConfig[] | List of sync configurations to run before the job. | *optional* | | `during` | SyncConfig[] | List of sync configurations to run during the job. | *optional* | | `after`  | SyncConfig[] | List of sync configurations to run after the job, but before marking the job complete. | *optional* |  **SyncConfig**  | Key          | Type   | Description | Default | |--------------|--------|-------------|---------| | `bucket`     | string | Name of the AWS S3 bucket. | **required** | | `prefix`     | string | Prefix for files in the S3 bucket. | **required** | | `local_path` | string | Local path to sync files to/from. | **required** | | `direction`  | string | Direction of the sync. Must be \"download\" for `before`, and \"upload\" for `during` and `after` | **required** | | `pattern`    | string | An ECMAScript(javascript) Regular Expression. Filepaths/keys that match will be included in the sync. Default is to include all files. | *optional* |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_batch_create_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_batch_create_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_job(self, **kwargs):  # noqa: E501
        """Queue a new job  # noqa: E501

         Queue a new job to be executed by the specified container group. [Get your Container Group ID](https://docs.salad.com/reference/get_container_group)  Note that although we use the term \"AWS S3 bucket\" in the documentation, you can use any S3-compatible storage provider. In particular, we recommend choosing a provider with no egress fees, such as [Cloudflare R2.](https://www.cloudflare.com/developer-platform/r2/)  You must use either the `sync` object or the `input_bucket`, `input_prefix`, `checkpoint_bucket`, `checkpoint_prefix`, `output_bucket`, and `output_prefix` fields. You may not use both.  **Body**  | Key                 | Type     | Description        | Default | |---------------------|----------|--------------------|---------| | `command`           | string   | The command to execute. | **required** | | `arguments`         | array    | List of arguments for the command. | [] | | `environment`       | object   | Key-value pairs defining the environment variables. | {} | | `input_bucket`      | string   | Name of the AWS S3 bucket for input files. | *optional* | | `input_prefix`      | string   | Prefix for input files in the S3 bucket. | *optional* | | `checkpoint_bucket` | string   | Name of the AWS S3 bucket for checkpoint files. | *optional* | | `checkpoint_prefix` | string   | Prefix for checkpoint files in the S3 bucket. | *optional* | | `output_bucket`     | string   | Name of the AWS S3 bucket for output files. | *optional* | | `output_prefix`     | string   | Prefix for output files in the S3 bucket. | *optional* | | `max_failures`      | integer  | Maximum number of allowed failures before the job is marked failed. | 3 | | `heartbeat_interval`| integer | Time interval (in seconds) for sending heartbeat signals. | 30 | | `webhook`           | string   | URL for the webhook to notify upon completion or failure. | *optional* | | `container_group_id`| string  | ID of the container group where the command will be executed. | **required** | | `compression` | boolean | If true, will gzip files it uploads to the bucket, appending the filename with .gz | false | | `sync` | object | Sync configuration for the job. | *optional* |  **body.sync**  | Key      | Type   | Description | Default | |----------|--------|-------------|---------| | `before` | SyncConfig[] | List of sync configurations to run before the job. | *optional* | | `during` | SyncConfig[] | List of sync configurations to run during the job. | *optional* | | `after`  | SyncConfig[] | List of sync configurations to run after the job, but before marking the job complete. | *optional* |  **SyncConfig**  | Key          | Type   | Description | Default | |--------------|--------|-------------|---------| | `bucket`     | string | Name of the AWS S3 bucket. | **required** | | `prefix`     | string | Prefix for files in the S3 bucket. | **required** | | `local_path` | string | Local path to sync files to/from. | **required** | | `direction`  | string | Direction of the sync. Must be \"download\" for `before`, and \"upload\" for `during` and `after` | **required** | | `pattern`    | string | An ECMAScript(javascript) Regular Expression. Filepaths/keys that match will be included in the sync. Default is to include all files. | *optional* |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsBody body:
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_job_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_create_job_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_create_job_with_http_info(self, **kwargs):  # noqa: E501
        """Queue a new job  # noqa: E501

         Queue a new job to be executed by the specified container group. [Get your Container Group ID](https://docs.salad.com/reference/get_container_group)  Note that although we use the term \"AWS S3 bucket\" in the documentation, you can use any S3-compatible storage provider. In particular, we recommend choosing a provider with no egress fees, such as [Cloudflare R2.](https://www.cloudflare.com/developer-platform/r2/)  You must use either the `sync` object or the `input_bucket`, `input_prefix`, `checkpoint_bucket`, `checkpoint_prefix`, `output_bucket`, and `output_prefix` fields. You may not use both.  **Body**  | Key                 | Type     | Description        | Default | |---------------------|----------|--------------------|---------| | `command`           | string   | The command to execute. | **required** | | `arguments`         | array    | List of arguments for the command. | [] | | `environment`       | object   | Key-value pairs defining the environment variables. | {} | | `input_bucket`      | string   | Name of the AWS S3 bucket for input files. | *optional* | | `input_prefix`      | string   | Prefix for input files in the S3 bucket. | *optional* | | `checkpoint_bucket` | string   | Name of the AWS S3 bucket for checkpoint files. | *optional* | | `checkpoint_prefix` | string   | Prefix for checkpoint files in the S3 bucket. | *optional* | | `output_bucket`     | string   | Name of the AWS S3 bucket for output files. | *optional* | | `output_prefix`     | string   | Prefix for output files in the S3 bucket. | *optional* | | `max_failures`      | integer  | Maximum number of allowed failures before the job is marked failed. | 3 | | `heartbeat_interval`| integer | Time interval (in seconds) for sending heartbeat signals. | 30 | | `webhook`           | string   | URL for the webhook to notify upon completion or failure. | *optional* | | `container_group_id`| string  | ID of the container group where the command will be executed. | **required** | | `compression` | boolean | If true, will gzip files it uploads to the bucket, appending the filename with .gz | false | | `sync` | object | Sync configuration for the job. | *optional* |  **body.sync**  | Key      | Type   | Description | Default | |----------|--------|-------------|---------| | `before` | SyncConfig[] | List of sync configurations to run before the job. | *optional* | | `during` | SyncConfig[] | List of sync configurations to run during the job. | *optional* | | `after`  | SyncConfig[] | List of sync configurations to run after the job, but before marking the job complete. | *optional* |  **SyncConfig**  | Key          | Type   | Description | Default | |--------------|--------|-------------|---------| | `bucket`     | string | Name of the AWS S3 bucket. | **required** | | `prefix`     | string | Prefix for files in the S3 bucket. | **required** | | `local_path` | string | Local path to sync files to/from. | **required** | | `direction`  | string | Direction of the sync. Must be \"download\" for `before`, and \"upload\" for `during` and `after` | **required** | | `pattern`    | string | An ECMAScript(javascript) Regular Expression. Filepaths/keys that match will be included in the sync. Default is to include all files. | *optional* |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsBody body:
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_job" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_scaling_rule(self, **kwargs):  # noqa: E501
        """Create a new scaling rule  # noqa: E501

        Create a new scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_scaling_rule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScalingrulesBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_scaling_rule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_create_scaling_rule_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_create_scaling_rule_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new scaling rule  # noqa: E501

        Create a new scaling rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_scaling_rule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScalingrulesBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_scaling_rule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/scaling-rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_token(self, id, **kwargs):  # noqa: E501
        """(ADMIN) Create a new token  # noqa: E501

        Create a new token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_token(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: User ID (required)
        :param IdTokenBody body:
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_token_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_create_token_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_create_token_with_http_info(self, id, **kwargs):  # noqa: E501
        """(ADMIN) Create a new token  # noqa: E501

        Create a new token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_token_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: User ID (required)
        :param IdTokenBody body:
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_create_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_user(self, **kwargs):  # noqa: E501
        """(ADMIN) Create a new user  # noqa: E501

        Create a new user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_create_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_create_user_with_http_info(self, **kwargs):  # noqa: E501
        """(ADMIN) Create a new user  # noqa: E501

        Create a new user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_job_heartbeat(self, id, **kwargs):  # noqa: E501
        """Job heartbeat  # noqa: E501

        Update the heartbeat for a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_heartbeat(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdHeartbeatBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_job_heartbeat_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_job_heartbeat_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_job_heartbeat_with_http_info(self, id, **kwargs):  # noqa: E501
        """Job heartbeat  # noqa: E501

        Update the heartbeat for a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_heartbeat_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdHeartbeatBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_heartbeat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_job_heartbeat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/heartbeat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_report_job_completed(self, id, **kwargs):  # noqa: E501
        """Report job completed  # noqa: E501

        Report a job completed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_job_completed(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdCompletedBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_report_job_completed_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_report_job_completed_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_report_job_completed_with_http_info(self, id, **kwargs):  # noqa: E501
        """Report job completed  # noqa: E501

        Report a job completed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_job_completed_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdCompletedBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_report_job_completed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_report_job_completed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/completed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_report_job_failure(self, id, **kwargs):  # noqa: E501
        """Report job failure  # noqa: E501

        Report a job failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_job_failure(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdFailedBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_report_job_failure_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_report_job_failure_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_report_job_failure_with_http_info(self, id, **kwargs):  # noqa: E501
        """Report job failure  # noqa: E501

        Report a job failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_job_failure_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Job ID (required)
        :param IdFailedBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_report_job_failure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_report_job_failure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/failed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
