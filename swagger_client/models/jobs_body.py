# coding: utf-8

"""
    üêï Kelpie API

    API for running long jobs on Salad  # noqa: E501

    OpenAPI spec version: 0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'object',
        'arguments': 'object',
        'environment': 'object',
        'input_bucket': 'object',
        'input_prefix': 'object',
        'checkpoint_bucket': 'object',
        'checkpoint_prefix': 'object',
        'output_bucket': 'object',
        'output_prefix': 'object',
        'max_failures': 'object',
        'heartbeat_interval': 'object',
        'webhook': 'object',
        'container_group_id': 'object',
        'compression': 'object',
        'sync': 'JobsSync'
    }

    attribute_map = {
        'command': 'command',
        'arguments': 'arguments',
        'environment': 'environment',
        'input_bucket': 'input_bucket',
        'input_prefix': 'input_prefix',
        'checkpoint_bucket': 'checkpoint_bucket',
        'checkpoint_prefix': 'checkpoint_prefix',
        'output_bucket': 'output_bucket',
        'output_prefix': 'output_prefix',
        'max_failures': 'max_failures',
        'heartbeat_interval': 'heartbeat_interval',
        'webhook': 'webhook',
        'container_group_id': 'container_group_id',
        'compression': 'compression',
        'sync': 'sync'
    }

    def __init__(self, command=None, arguments=None, environment=None, input_bucket=None, input_prefix=None, checkpoint_bucket=None, checkpoint_prefix=None, output_bucket=None, output_prefix=None, max_failures=None, heartbeat_interval=None, webhook=None, container_group_id=None, compression=None, sync=None):  # noqa: E501
        """JobsBody - a model defined in Swagger"""  # noqa: E501
        self._command = None
        self._arguments = None
        self._environment = None
        self._input_bucket = None
        self._input_prefix = None
        self._checkpoint_bucket = None
        self._checkpoint_prefix = None
        self._output_bucket = None
        self._output_prefix = None
        self._max_failures = None
        self._heartbeat_interval = None
        self._webhook = None
        self._container_group_id = None
        self._compression = None
        self._sync = None
        self.discriminator = None
        self.command = command
        if arguments is not None:
            self.arguments = arguments
        if environment is not None:
            self.environment = environment
        if input_bucket is not None:
            self.input_bucket = input_bucket
        if input_prefix is not None:
            self.input_prefix = input_prefix
        if checkpoint_bucket is not None:
            self.checkpoint_bucket = checkpoint_bucket
        if checkpoint_prefix is not None:
            self.checkpoint_prefix = checkpoint_prefix
        if output_bucket is not None:
            self.output_bucket = output_bucket
        if output_prefix is not None:
            self.output_prefix = output_prefix
        if max_failures is not None:
            self.max_failures = max_failures
        if heartbeat_interval is not None:
            self.heartbeat_interval = heartbeat_interval
        if webhook is not None:
            self.webhook = webhook
        self.container_group_id = container_group_id
        if compression is not None:
            self.compression = compression
        if sync is not None:
            self.sync = sync

    @property
    def command(self):
        """Gets the command of this JobsBody.  # noqa: E501


        :return: The command of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this JobsBody.


        :param command: The command of this JobsBody.  # noqa: E501
        :type: object
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def arguments(self):
        """Gets the arguments of this JobsBody.  # noqa: E501


        :return: The arguments of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this JobsBody.


        :param arguments: The arguments of this JobsBody.  # noqa: E501
        :type: object
        """

        self._arguments = arguments

    @property
    def environment(self):
        """Gets the environment of this JobsBody.  # noqa: E501


        :return: The environment of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this JobsBody.


        :param environment: The environment of this JobsBody.  # noqa: E501
        :type: object
        """

        self._environment = environment

    @property
    def input_bucket(self):
        """Gets the input_bucket of this JobsBody.  # noqa: E501


        :return: The input_bucket of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._input_bucket

    @input_bucket.setter
    def input_bucket(self, input_bucket):
        """Sets the input_bucket of this JobsBody.


        :param input_bucket: The input_bucket of this JobsBody.  # noqa: E501
        :type: object
        """

        self._input_bucket = input_bucket

    @property
    def input_prefix(self):
        """Gets the input_prefix of this JobsBody.  # noqa: E501


        :return: The input_prefix of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._input_prefix

    @input_prefix.setter
    def input_prefix(self, input_prefix):
        """Sets the input_prefix of this JobsBody.


        :param input_prefix: The input_prefix of this JobsBody.  # noqa: E501
        :type: object
        """

        self._input_prefix = input_prefix

    @property
    def checkpoint_bucket(self):
        """Gets the checkpoint_bucket of this JobsBody.  # noqa: E501


        :return: The checkpoint_bucket of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._checkpoint_bucket

    @checkpoint_bucket.setter
    def checkpoint_bucket(self, checkpoint_bucket):
        """Sets the checkpoint_bucket of this JobsBody.


        :param checkpoint_bucket: The checkpoint_bucket of this JobsBody.  # noqa: E501
        :type: object
        """

        self._checkpoint_bucket = checkpoint_bucket

    @property
    def checkpoint_prefix(self):
        """Gets the checkpoint_prefix of this JobsBody.  # noqa: E501


        :return: The checkpoint_prefix of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._checkpoint_prefix

    @checkpoint_prefix.setter
    def checkpoint_prefix(self, checkpoint_prefix):
        """Sets the checkpoint_prefix of this JobsBody.


        :param checkpoint_prefix: The checkpoint_prefix of this JobsBody.  # noqa: E501
        :type: object
        """

        self._checkpoint_prefix = checkpoint_prefix

    @property
    def output_bucket(self):
        """Gets the output_bucket of this JobsBody.  # noqa: E501


        :return: The output_bucket of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._output_bucket

    @output_bucket.setter
    def output_bucket(self, output_bucket):
        """Sets the output_bucket of this JobsBody.


        :param output_bucket: The output_bucket of this JobsBody.  # noqa: E501
        :type: object
        """

        self._output_bucket = output_bucket

    @property
    def output_prefix(self):
        """Gets the output_prefix of this JobsBody.  # noqa: E501


        :return: The output_prefix of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._output_prefix

    @output_prefix.setter
    def output_prefix(self, output_prefix):
        """Sets the output_prefix of this JobsBody.


        :param output_prefix: The output_prefix of this JobsBody.  # noqa: E501
        :type: object
        """

        self._output_prefix = output_prefix

    @property
    def max_failures(self):
        """Gets the max_failures of this JobsBody.  # noqa: E501


        :return: The max_failures of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._max_failures

    @max_failures.setter
    def max_failures(self, max_failures):
        """Sets the max_failures of this JobsBody.


        :param max_failures: The max_failures of this JobsBody.  # noqa: E501
        :type: object
        """

        self._max_failures = max_failures

    @property
    def heartbeat_interval(self):
        """Gets the heartbeat_interval of this JobsBody.  # noqa: E501


        :return: The heartbeat_interval of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._heartbeat_interval

    @heartbeat_interval.setter
    def heartbeat_interval(self, heartbeat_interval):
        """Sets the heartbeat_interval of this JobsBody.


        :param heartbeat_interval: The heartbeat_interval of this JobsBody.  # noqa: E501
        :type: object
        """

        self._heartbeat_interval = heartbeat_interval

    @property
    def webhook(self):
        """Gets the webhook of this JobsBody.  # noqa: E501


        :return: The webhook of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this JobsBody.


        :param webhook: The webhook of this JobsBody.  # noqa: E501
        :type: object
        """

        self._webhook = webhook

    @property
    def container_group_id(self):
        """Gets the container_group_id of this JobsBody.  # noqa: E501


        :return: The container_group_id of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._container_group_id

    @container_group_id.setter
    def container_group_id(self, container_group_id):
        """Sets the container_group_id of this JobsBody.


        :param container_group_id: The container_group_id of this JobsBody.  # noqa: E501
        :type: object
        """
        if container_group_id is None:
            raise ValueError("Invalid value for `container_group_id`, must not be `None`")  # noqa: E501

        self._container_group_id = container_group_id

    @property
    def compression(self):
        """Gets the compression of this JobsBody.  # noqa: E501


        :return: The compression of this JobsBody.  # noqa: E501
        :rtype: object
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this JobsBody.


        :param compression: The compression of this JobsBody.  # noqa: E501
        :type: object
        """

        self._compression = compression

    @property
    def sync(self):
        """Gets the sync of this JobsBody.  # noqa: E501


        :return: The sync of this JobsBody.  # noqa: E501
        :rtype: JobsSync
        """
        return self._sync

    @sync.setter
    def sync(self, sync):
        """Sets the sync of this JobsBody.


        :param sync: The sync of this JobsBody.  # noqa: E501
        :type: JobsSync
        """

        self._sync = sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
